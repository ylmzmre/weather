{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","API_KEY","App","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","main","temp","sys","weather","undefined","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ad770ebd.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Title extends React.Component {\n  render() {\n      return(\n          <div>\n              <h1>Hava Durumu</h1>\n          </div>\n      )\n  }\n}\n\nexport default Title;\n","import React from \"react\";\n\nclass Form extends React.Component {\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.props.getWeather}>\n          <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n          <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n          <button>Get Weather</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nclass Weather extends React.Component {\n  render() {\n    return (\n      <div className=\"weather__info\">\n        {this.props.city && this.props.country && (\n          <p className=\"weather__key\">\n            {\" \"}\n            Location:\n            <span className=\"weather__value\">\n              {\" \"}\n              {this.props.city}, {this.props.country}\n            </span>\n          </p>\n        )}\n        {this.props.temperature && (\n          <p className=\"weather__key\">\n            {\" \"}\n            Temperature:\n            <span className=\"weather__value\"> {this.props.temperature} </span>\n          </p>\n        )}\n        {this.props.humidity && (\n          <p className=\"weather__key\">\n            {\" \"}\n            Humidity:\n            <span className=\"weather__value\"> {this.props.humidity} </span>\n          </p>\n        )}\n        {this.props.description && (\n          <p className=\"weather__key\">\n            {\" \"}\n            Conditions:\n            <span className=\"weather__value\"> {this.props.description} </span>\n          </p>\n        )}\n        {this.props.error && <p className=\"weather__error\">{this.props.error}</p>}\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nimport Titles from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"b45195ed727049f6a693823d71ef4545\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n    };\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const response = await api_call.json();\nconsole.log('tag', response);\n    if (city && country) {\n      console.log(\"data\", response);\n\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please Enter the value\",\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-md-6 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-md-6 form-container\">\n                    <Form getWeather={this.getWeather} />\n                    <Weather\n                      temperature={this.state.temperature}\n                      humidity={this.state.humidity}\n                      city={this.state.city}\n                      country={this.state.country}\n                      description={this.state.description}\n                      error={this.state.error}\n                    />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}